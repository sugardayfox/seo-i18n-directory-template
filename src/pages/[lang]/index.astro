---
import Layout from '../../layouts/Layout.astro';
import DirectoryItemCard from '../../components/DirectoryItemCard.astro';
import { getLangFromUrl, useTranslations } from '../../utils/i18n';
import { languages } from '../../i18n/ui';
import { getDirectoryItems, getBlogPosts } from '../../utils/supabase';
import ListingModal from '../../components/ListingModal.astro';
import type { DirectoryItem, BlogPost } from '../../utils/supabase';

export async function getStaticPaths() {
  return Object.keys(languages).map(lang => ({
    params: { lang }
  }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

let directoryItems: DirectoryItem[] = [];
let posts: BlogPost[] = [];
let error = false;

try {
  [directoryItems, posts] = await Promise.all([
    getDirectoryItems(lang),
    getBlogPosts(lang)
  ]);
} catch (e) {
  console.error('Error fetching data:', e);
  error = true;
}

if (error) {
  return Astro.redirect(`/${lang}/error`);
}

const faqs = [
  {
    question: t('faq.q1'),
    answer: t('faq.a1')
  },
  {
    question: t('faq.q2'),
    answer: t('faq.a2')
  },
  {
    question: t('faq.q3'),
    answer: t('faq.a3')
  }
];
---

<Layout title={t('hero.title')}>
  <!-- Hero Section -->
  <section class="bg-primary text-white py-20">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h1 class="text-4xl md:text-6xl font-bold">
        {t('hero.title')}
      </h1>
      <p class="mt-4 text-xl text-gray-300">
        {t('hero.subtitle')}
      </p>
      <a
        href={`/${lang}/directory`}
        class="mt-8 inline-block bg-white text-primary px-8 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors"
      >
        {t('hero.cta')}
      </a>
    </div>
  </section>

  <!-- Directory Preview Section -->
  <section class="py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center mb-12">
        <h2 class="text-3xl font-bold">{t('directory.title')}</h2>
        <a href={`/${lang}/directory`} class="text-primary font-semibold hover:text-secondary">
          {t('directory.viewAll')} â†’
        </a>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {directoryItems.length > 0 ? (
          directoryItems.slice(0, 6).map((item) => (
            <DirectoryItemCard
              title={item.title}
              description={item.description}
              tags={item.tags || []}
              id={item.id}
              lang={lang}
            />
          ))
        ) : (
          <p class="col-span-full text-center text-gray-500">
            {t('directory.noItems')}
          </p>
        )}
      </div>
    </div>
  </section>

  <!-- Rest of the template remains the same -->
  <ListingModal />
</Layout>