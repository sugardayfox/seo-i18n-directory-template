---
import Layout from '../../../layouts/Layout.astro';
import SearchBar from '../../../components/SearchBar.astro';
import TagFilter from '../../../components/TagFilter.astro';
import DirectoryCard from '../../../components/DirectoryCard.astro';
import { getLangFromUrl, useTranslations } from '../../../utils/i18n';
import { languages } from '../../../i18n/ui';
import { supabase } from '../../../utils/supabase';
import type { DirectoryItem } from '../../../utils/supabase';

export async function getStaticPaths() {
  return Object.keys(languages).map(lang => ({ params: { lang } }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { data: directoryItems = [], error } = await supabase
  .from('directory_items')
  .select('*')
  .eq('lang', lang)
  .order('created_at', { ascending: false });

if (error) {
  return Astro.redirect(`/${lang}/error`);
}

const allTags = [...new Set(directoryItems.flatMap(item => item.tags))].sort();
---

<Layout title={t('directory.title')}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <h1 class="text-4xl font-bold mb-12">{t('directory.title')}</h1>
    
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- Left Sidebar -->
      <div class="lg:col-span-1 space-y-8">
        <SearchBar value="" onChange="updateDirectory" />
        <TagFilter
          tags={allTags}
          selectedTags={[]}
          onChange="updateDirectory"
        />
      </div>

      <!-- Directory Items Grid -->
      <div class="lg:col-span-3">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="directoryGrid">
          {directoryItems.length > 0 ? (
            directoryItems.map((item: DirectoryItem) => (
              <DirectoryCard
                title={item.title}
                description={item.description}
                tags={item.tags}
                slug={item.id}
                lang={lang}
              />
            ))
          ) : (
            <p class="col-span-full text-center text-gray-500">
              {t('directory.noItems')}
            </p>
          )}
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  let items = [];
  let searchTerm = '';
  let selectedTags = [];
  const currentLang = window.location.pathname.split('/')[1];

  async function fetchDirectoryItems() {
    try {
      const response = await fetch(`/api/directory?lang=${currentLang}`);
      if (!response.ok) throw new Error('Failed to fetch directory items');
      items = await response.json();
      filterItems();
    } catch (error) {
      console.error('Error fetching directory items:', error);
    }
  }

  function filterItems() {
    const filteredItems = items.filter(item => {
      const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          item.description.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesTags = selectedTags.length === 0 || 
                         selectedTags.every(tag => item.tags.includes(tag));
      return matchesSearch && matchesTags;
    });

    updateGrid(filteredItems);
  }

  function updateGrid(filteredItems) {
    const grid = document.getElementById('directoryGrid');
    if (!grid) return;
    
    grid.innerHTML = filteredItems.length ? filteredItems.map(item => `
      <article class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="p-6">
          <h2 class="text-xl font-semibold mb-2">
            <a href="/${currentLang}/directory/${item.id}" class="hover:text-primary">
              ${item.title}
            </a>
          </h2>
          <p class="text-gray-600 mb-4">${item.description}</p>
          <div class="flex flex-wrap gap-2">
            ${item.tags.map(tag => `
              <span class="px-2 py-1 bg-gray-100 text-gray-600 text-sm rounded-full">
                ${tag}
              </span>
            `).join('')}
          </div>
        </div>
      </article>
    `).join('') : `<p class="col-span-full text-center text-gray-500">No items found</p>`;
  }

  document.addEventListener('updateDirectory', (e) => {
    if (typeof e.detail === 'string') {
      searchTerm = e.detail;
    } else if (Array.isArray(e.detail)) {
      selectedTags = e.detail;
    }
    filterItems();
  });

  fetchDirectoryItems();
</script>